package RATES;

import org.json.JSONArray;
import org.json.JSONObject;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.json.JSONObject;
import org.json.JSONArray;

public class ProfilePanel extends JPanel implements ActionListener {

    JButton homeButton;
    JPanel theCards;

    JButton changePhoto;
    JButton removePhoto;

    JFileChooser fc;
    JLabel userIcon;

    String userContent;
    String profilePhotoPath;
    JSONObject userData;

    ProfilePanel(JPanel cards){
        theCards = cards;
        fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "jpg", "jpeg", "png", "gif");
        fc.setFileFilter(filter);

        setPreferredSize(new Dimension(1200,550));

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        buttonPanel.setPreferredSize(new Dimension(1200,40));
        buttonPanel.setBackground(Color.white);
        homeButton = new JButton("BACK");
        homeButton.addActionListener(this);
        buttonPanel.add(homeButton);
        add(buttonPanel);
        setBackground(Color.white);

        JSplitPane profileSplit = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        profileSplit.setPreferredSize(new Dimension(1200,550));
        profileSplit.setEnabled(false);
        profileSplit.setBorder(null);
        profileSplit.setDividerSize(0);
        profileSplit.setBackground(Color.white);
        add(profileSplit);

        //##############################
        //Profile Left
        //##############################
        JPanel profileLeft = new JPanel();
        profileLeft.setLayout(new FlowLayout(FlowLayout.CENTER,60,20));
        profileLeft.setPreferredSize(new Dimension(400,550));
        profileLeft.setMaximumSize(new Dimension(400,550));
        profileLeft.setMinimumSize(new Dimension(400,550));
        profileLeft.setBackground(Color.white);
        profileSplit.add(profileLeft);


        userIcon = new JLabel("");
        userIcon.setPreferredSize(new Dimension(220,220));

        //Gets class teachers from JSON
        profilePhotoPath = "Images/ProfileImages/default.png";
        String userJsonPath = "JSON/user.json";

        try {
            userContent = new String((Files.readAllBytes(Paths.get(userJsonPath))));
            userData = new JSONObject(userContent);
            profilePhotoPath = userData.getJSONObject("userDetails").get("profileImagePath").toString();
        }
        catch (Exception e) {
            e.printStackTrace();
        }

        BufferedImage img = null;
        try {
            img = ImageIO.read(new File(profilePhotoPath));
            Image dimg = img.getScaledInstance(220, 220, Image.SCALE_SMOOTH);
            ImageIcon profileImage = new ImageIcon(dimg);
            userIcon.setIcon(profileImage);
        } catch (Exception e) {
            e.printStackTrace();
        }

        userIcon.setPreferredSize(new Dimension(220,220));
        //userIcon.setBorder(new EmptyBorder(45,45,45,45));
        profileLeft.add(userIcon);

        changePhoto = new JButton("Change Image");
        changePhoto.addActionListener(this);
        removePhoto = new JButton("Remove Image");
        removePhoto.addActionListener(this);

        profileLeft.add(changePhoto);
        profileLeft.add(removePhoto);

        //##############################
        //Profile Right
        //##############################
        JPanel profileRight = new JPanel();
        profileRight.setPreferredSize(new Dimension(800,550));
        profileRight.setMaximumSize(new Dimension(800,550));
        profileRight.setMinimumSize(new Dimension(800,550));
        profileRight.setBackground(Color.white);
        profileSplit.add(profileRight);

    }


    @Override
    public void actionPerformed(ActionEvent e) {
        JButton source = (JButton) e.getSource();
        if(source.equals(homeButton)){
            CardLayout cl = (CardLayout)(theCards.getLayout());
            cl.show(theCards, "Home");
        }

        if(source.equals(removePhoto)){
            userData.getJSONObject("userDetails").put("profileImagePath", "Images/ProfileImages/default.png");
            System.out.println(userData);
            try {
                FileWriter myWriter = new FileWriter("JSON/user.json");
                myWriter.write(userData.toString(4));
                myWriter.close();
                System.out.println("Successfully wrote to the file.");
            } catch (Exception exception) {
                System.out.println("An error occurred.");
                exception.printStackTrace();
            }

            BufferedImage img = null;
            try {
                img = ImageIO.read(new File(userData.getJSONObject("userDetails").getString("profileImagePath")));
                Image dimg = img.getScaledInstance(220, 220, Image.SCALE_SMOOTH);
                ImageIcon profileImage = new ImageIcon(dimg);
                userIcon.setIcon(profileImage);
            } catch (Exception exception) {
                exception.printStackTrace();
            }



        }



        if(source.equals(changePhoto)){
            try{
                int returnVal = fc.showOpenDialog(this);
                if(returnVal == JFileChooser.APPROVE_OPTION){
                    File newImage = fc.getSelectedFile();

                    //profilePhotoPath = "Images/ProfileImages/default.png";

                    if(newImage != null){
                        Path path = Paths.get("Images/ProfileImages",newImage.getName());
                        try {
                            Files.copy(Path.of(newImage.getAbsolutePath()),path);
                            profilePhotoPath = "Images/ProfileImages/"+newImage.getName();
                        } catch (Exception Exception) {

                            profilePhotoPath = "Images/ProfileImages/default.png";
                        }
                    }
                    else{
                        profilePhotoPath = "Images/ProfileImages/default.png";
                    }

                    userData.getJSONObject("userDetails").put("profileImagePath", profilePhotoPath);
                    System.out.println(userData);
                    try {
                        FileWriter myWriter = new FileWriter("JSON/user.json");
                        myWriter.write(userData.toString(4));
                        myWriter.close();
                        System.out.println("Successfully wrote to the file.");
                    } catch (Exception exception) {
                        System.out.println("An error occurred.");
                        exception.printStackTrace();
                    }

                    BufferedImage img = null;
                    try {
                        img = ImageIO.read(new File(userData.getJSONObject("userDetails").getString("profileImagePath")));
                        Image dimg = img.getScaledInstance(220, 220, Image.SCALE_SMOOTH);
                        ImageIcon profileImage = new ImageIcon(dimg);
                        userIcon.setIcon(profileImage);
                    } catch (Exception exception) {
                        exception.printStackTrace();
                    }

                }
                else {
                    //
                }
            }
            catch(Exception exception){
            }
        }



    }
}