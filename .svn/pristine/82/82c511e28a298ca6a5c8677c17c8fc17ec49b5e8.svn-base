package RATES;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.json.JSONObject;
import org.json.JSONArray;

import java.time.LocalDateTime;
import java.util.ArrayList;


import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER;
import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS;

public class SubjectPanel extends JPanel implements ActionListener {


    JFileChooser fc;

    String[] evalOptions = {"Select option","Teaching Methods","Test 2","Test3","Other"};
    Color[] colors = {Color.red, Color.cyan, Color.GREEN, Color.ORANGE};

    String userID = "testUser";

    //Subject info
    String sCode;
    String sName;

    //Evaluation
    JTextArea evaluation;
    String evalBody;
    //Radio Buttons
    JRadioButton positive;
    JRadioButton neutral;
    JRadioButton negative;
    JRadioButton invisible;
    ButtonGroup ratingGroup;
    //Anon
    JRadioButton anon;
    JComboBox combo;
    JButton submit;
    JButton attachmentButton;
    JButton clearAttachment;

    String attachmentPath;
    File attachment;
    JLabel fileLabel;




    SubjectPanel(String subjectCode, String subjectName, int index) {

        sCode = subjectCode;
        sName = subjectName;
        fc = new JFileChooser();

        //gets class content from JSON
        ArrayList<String> contents = GetClassContent(subjectCode);
        JButton[] contentButtons = new JButton[contents.size()];

        //Gets class teachers from JSON
        JSONArray teachers = GetClassTeachers(subjectCode);
        JLabel[] academicLabels = new JLabel[teachers.length()];

        setLayout(new BorderLayout());

        JSplitPane sp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        sp.setPreferredSize(new Dimension(1200,550));
        sp.setResizeWeight(1);
        sp.setEnabled(false);
        add(sp);

        //LEFT
        JPanel subLeft = new JPanel();
        subLeft.setLayout(new FlowLayout(FlowLayout.LEFT,30,30));
        subLeft.setBorder(new EmptyBorder(20, 30, 30, 30));
        subLeft.setBackground(Color.white);
        subLeft.setPreferredSize(new Dimension(700, 2000));

        JLabel title = new JLabel(subjectCode +" " +subjectName);
        title.setFont(new Font(title.getFont().getFontName(), Font.BOLD, 35));
        title.setBorder(new EmptyBorder(0,0,0,0));
        //title.setBorder(BorderFactory.createLineBorder(colors[index], 5));
        subLeft.add(title);

        JSeparator separator = new JSeparator(SwingConstants.HORIZONTAL);
        separator.setPreferredSize(new Dimension(700,1));
        //separator.setBorder(BorderFactory.createLineBorder(colors[index], 5));
        separator.setForeground(colors[index]);
        subLeft.add(separator);


        JLabel subheading = new JLabel("Evaluate Class Content");
        subheading.setFont(new Font(title.getFont().getFontName(), Font.PLAIN, 20));
        subheading.setBorder(new EmptyBorder(0,0,0,0));
        subLeft.add(subheading);

        for(int x = 0; x < contents.size()-1;x++){
            contentButtons[x] = new JButton();
            contentButtons[x].setPreferredSize(new Dimension(550,60));
            contentButtons[x].setText(contents.get(x));
            contentButtons[x].setFont(new Font(title.getFont().getFontName(), Font.BOLD, 17));
            contentButtons[x].setBackground(Color.lightGray);
            subLeft.add(contentButtons[x]);
        }

        JScrollPane scroll = new JScrollPane(subLeft,VERTICAL_SCROLLBAR_ALWAYS,HORIZONTAL_SCROLLBAR_NEVER);
        scroll.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = Color.LIGHT_GRAY;
            }
        });

        //RIGHT TOP
        JSplitPane rightSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
        rightSplit.setSize(100,200);
        rightSplit.setEnabled(false);

        JPanel subRightTop = new JPanel();
        subRightTop.setLayout(new BoxLayout(subRightTop,BoxLayout.Y_AXIS));
        subRightTop.setPreferredSize(new Dimension(300, 200));
        subRightTop.setMaximumSize(new Dimension(300, 200));
        JLabel teacherHeading = new JLabel("Topic Staff" + " - "+ subjectCode);
        teacherHeading.setFont(new Font(title.getFont().getFontName(), Font.PLAIN, 18));
        teacherHeading.setBorder(new EmptyBorder(10, 10, 10, 10));
        subRightTop.add(teacherHeading);


        for(int y = 0; y < teachers.length();y++){
            academicLabels[y] = new JLabel(teachers.getJSONObject(y).get("role").toString() + " : " + teachers.getJSONObject(y).get("name").toString());
            academicLabels[y].setBorder(new EmptyBorder(10, 10, 10, 10));
            subRightTop.add(academicLabels[y]);
        }

        rightSplit.add(subRightTop, BoxLayout.Y_AXIS);

        //RIGHT BOTTOM
        JPanel subRightBottom = new JPanel();
        subRightBottom.setLayout(new FlowLayout(FlowLayout.LEFT,6,6));
        subRightBottom.setPreferredSize(new Dimension(400, 150));
        subRightBottom.setMinimumSize(new Dimension(400, 150));
        subRightBottom.setBackground(Color.WHITE);

        JLabel evaluationHeading = new JLabel("Submit Evaluation - " + subjectCode);
        evaluationHeading.setBorder(new EmptyBorder(0,0,0,200));
        evaluationHeading.setFont(new Font(title.getFont().getFontName(), Font.PLAIN, 18));
        subRightBottom.add(evaluationHeading);

        JSeparator separator2 = new JSeparator(SwingConstants.HORIZONTAL);
        separator2.setPreferredSize(new Dimension(390,1));
        subRightBottom.add(separator2);

        JLabel feelingLabel = new JLabel("How do you feel?");
        feelingLabel.setBackground(Color.WHITE);
        subRightBottom.add(feelingLabel);

        ratingGroup = new ButtonGroup();
        invisible = new JRadioButton();
        invisible.setSelected(true);
        positive = new JRadioButton("Positive");
        positive.setBorder(new EmptyBorder(0,0,0,0));
        positive.setBackground(Color.white);
        neutral = new JRadioButton("Neutral");
        neutral.setBackground(Color.white);
        neutral.setBorder(new EmptyBorder(0,0,0,15));
        negative = new JRadioButton("Negative");
        negative.setBorder(new EmptyBorder(0,15,0,15));
        negative.setBackground(Color.white);
        ratingGroup.add(negative);
        ratingGroup.add(neutral);
        ratingGroup.add(positive);
        ratingGroup.add(invisible);
        subRightBottom.add(negative);
        subRightBottom.add(neutral);
        subRightBottom.add(positive);

        combo = new JComboBox(evalOptions);
        combo.setPreferredSize(new Dimension(200,25));
        //combo.setBorder(new EmptyBorder(0,0,0,100));
        subRightBottom.add(combo);

        evaluation = new JTextArea(10,35);
        evaluation.setBorder(BorderFactory.createLineBorder(Color.black));
        evaluation.setMargin(new Insets(10,10,10,10));
        subRightBottom.add(evaluation);

        JSeparator separator3 = new JSeparator(SwingConstants.HORIZONTAL);
        separator3.setPreferredSize(new Dimension(390,1));
        subRightBottom.add(separator3);


        //test.setPreferredSize(new Dimension(110,50));
        anon = new JRadioButton();
        anon.setText("Submit Anonymously");
        anon.setBorder(new EmptyBorder(0,0,0,70));
        anon.setBackground(Color.white);
        subRightBottom.add(anon);

        attachmentButton = new JButton("Attach File");
        attachmentButton.addActionListener(this);
        subRightBottom.add(attachmentButton);

        submit = new JButton("Submit");
        submit.addActionListener(this);
        subRightBottom.add(submit);

        JSeparator separator4 = new JSeparator(SwingConstants.HORIZONTAL);
        separator4.setPreferredSize(new Dimension(390,1));
        subRightBottom.add(separator3);

        clearAttachment = new JButton("Remove Attachment");
        clearAttachment.addActionListener(this);
        subRightBottom.add(clearAttachment);

        fileLabel = new JLabel("");
        subRightBottom.add(fileLabel);

        rightSplit.setBottomComponent(subRightBottom);

        sp.add(scroll);
        sp.add(rightSplit);

    }

    private ArrayList<String> GetClassContent(String subjectCode){
        ArrayList<String> contents = new ArrayList<>();
        for(int j = 0; j < MainPanel.content.length(); j++){
            if(MainPanel.content.getJSONObject(j).get("classCode").toString().equals(subjectCode)){
                contents.add(MainPanel.content.getJSONObject(j).get("name").toString());
            }
        }
        return contents;
    }

    private JSONArray GetClassTeachers(String subjectCode){
        //Gets class teachers from JSON
        JSONArray teachers;
        String academicJsonPath = "JSON/teachers.json";
        try {
            String teacherContent = new String((Files.readAllBytes(Paths.get(academicJsonPath))));
            JSONObject y = new JSONObject(teacherContent);
            teachers = y.getJSONObject("class").getJSONObject(subjectCode).getJSONArray("teachers");
            return teachers;
        }
        catch (IOException e) {
            e.printStackTrace();
            return null;
        }

    }

    @Override
    public void actionPerformed(ActionEvent e) {

        JButton source = (JButton) e.getSource();

        if(source.equals(clearAttachment)){
            attachment = null;
            fileLabel.setText("");
        }

        if(source.equals(attachmentButton)){
            int returnVal = fc.showOpenDialog(this);
            if(returnVal == JFileChooser.APPROVE_OPTION){
                attachment = fc.getSelectedFile();
                fileLabel.setText(attachment.getName());

            }
            else {
                //
            }
        }
        if (source.equals(submit)) {
            if (evaluation.getText().length() == 0 || combo.getSelectedIndex() == 0 || invisible.isSelected()) {
                if (evaluation.getText().length() == 0) {
                    JOptionPane.showMessageDialog(this, "Please complete the evaluation body");
                } else if (combo.getSelectedIndex() == 0) {
                    JOptionPane.showMessageDialog(this, "Please select an option from the drop-down menu");
                } else if (invisible.isSelected()) {
                    JOptionPane.showMessageDialog(this, "Please select either Positive, Neutral, or Negative from the radio buttons");
                }
            } else {
                String feeling = "";
                boolean anonymous = anon.isSelected();
                anon.setSelected(false);
                evalBody = evaluation.getText().toString();
                evaluation.setText("");

                String dateTime = LocalDateTime.now().toString();

                if (positive.isSelected()) {
                    feeling = "positive";
                    invisible.setSelected(true);
                } else if (neutral.isSelected()) {
                    feeling = "neutral";
                    invisible.setSelected(true);
                } else if (negative.isSelected()) {
                    feeling = "negative";
                    invisible.setSelected(true);
                }

                if(attachment != null){
                    Path path = Paths.get("attachments",attachment.getName());
                    try {
                        Files.copy(Path.of(attachment.getAbsolutePath()),path);
                        attachmentPath = "attachments/"+attachment.getName();
                    } catch (IOException ioException) {
                        ioException.printStackTrace();
                        attachmentPath = "";
                    }
                }
                else{
                    attachmentPath = "";
                }


                new Evaluation(sCode, anonymous, feeling, evalBody, userID, dateTime, combo.getSelectedItem().toString(), attachmentPath);
                combo.setSelectedIndex(0);
                attachment = null;
                fileLabel.setText("");
                JOptionPane.showMessageDialog(this, "Thank you for submitting your evaluation");
            }
        }
    }
}
